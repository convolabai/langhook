name: End-to-End Tests

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  
jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-asyncio httpx pytest-mock
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short -x --ignore=tests/e2e/
  
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Create test environment file
      run: |
        cp .env.example .env || touch .env
        echo "DEBUG=true" >> .env
        echo "LOG_LEVEL=DEBUG" >> .env
    
    - name: Start services
      run: |
        # Start infrastructure services first (without LangHook)
        docker compose -f docker-compose.yml -f docker-compose.test.yml up -d --build nats redis postgres langhook-streams
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be healthy..."
        
        # Function to check if all required services are healthy
        check_services_healthy() {
          # Get status of each service we care about
          redis_status=$(docker compose -f docker-compose.yml -f docker-compose.test.yml ps redis --format "{{.Health}}")
          postgres_status=$(docker compose -f docker-compose.yml -f docker-compose.test.yml ps postgres --format "{{.Health}}")
          streams_status=$(docker compose -f docker-compose.yml -f docker-compose.test.yml ps -a langhook-streams --format "{{.Status}}")
          
          echo "Redis: $redis_status, Postgres: $postgres_status, Streams: $streams_status"
          
          # Check if all are healthy/completed
          [[ "$redis_status" == "healthy" ]] && \
          [[ "$postgres_status" == "healthy" ]] && \
          [[ "$streams_status" == *"Exited (0)"* ]]
        }
        
        # Wait for infrastructure services to be healthy (max 5 minutes)
        max_attempts=60
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          if check_services_healthy; then
            echo "All infrastructure services are healthy!"
            break
          fi
          
          if [ $((attempt % 10)) -eq 0 ]; then
            echo "Still waiting for services... (attempt $attempt/$max_attempts)"
            docker compose -f docker-compose.yml -f docker-compose.test.yml ps
          fi
          
          sleep 5
          attempt=$((attempt + 1))
        done
        
        if [ $attempt -gt $max_attempts ]; then
          echo "Services failed to become healthy within 5 minutes"
          docker compose -f docker-compose.yml -f docker-compose.test.yml ps
          docker compose -f docker-compose.yml -f docker-compose.test.yml logs
          exit 1
        fi
        
        # Now start the main LangHook service
        echo "Starting LangHook service..."
        docker compose -f docker-compose.yml -f docker-compose.test.yml up -d langhook
        
        # Wait for LangHook service to be healthy (max 3 minutes)
        echo "Waiting for LangHook to be healthy..."
        max_attempts=36
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          if curl -f http://localhost:8000/health/ 2>/dev/null; then
            echo "LangHook service is healthy!"
            break
          fi
          
          if [ $((attempt % 6)) -eq 0 ]; then
            echo "Still waiting for LangHook... (attempt $attempt/$max_attempts)"
            docker compose -f docker-compose.yml -f docker-compose.test.yml ps langhook
          fi
          
          sleep 5
          attempt=$((attempt + 1))
        done
        
        if [ $attempt -gt $max_attempts ]; then
          echo "LangHook failed to become healthy within 3 minutes"
          docker compose -f docker-compose.yml -f docker-compose.test.yml logs langhook
          exit 1
        fi
    
    - name: Run end-to-end tests
      run: |
        docker compose -f docker-compose.yml -f docker-compose.test.yml run --rm test-runner
    
    - name: Collect logs on failure
      if: failure()
      run: |
        echo "=== Docker Compose Services ==="
        docker compose -f docker-compose.yml -f docker-compose.test.yml ps
        echo "=== LangHook Service Logs ==="
        docker compose -f docker-compose.yml -f docker-compose.test.yml logs langhook
        echo "=== NATS Logs ==="
        docker compose -f docker-compose.yml -f docker-compose.test.yml logs nats
        echo "=== Redis Logs ==="
        docker compose -f docker-compose.yml -f docker-compose.test.yml logs redis
        echo "=== Postgres Logs ==="
        docker compose -f docker-compose.yml -f docker-compose.test.yml logs postgres
    
    - name: Clean up
      if: always()
      run: |
        docker compose -f docker-compose.yml -f docker-compose.test.yml down -v --remove-orphans

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check
      continue-on-error: true
    
    - name: Run bandit security check
      run: |
        bandit -r langhook/ -f json -o bandit-results.json || true
        bandit -r langhook/
      continue-on-error: true